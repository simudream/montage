/*<copyright>
Copyright (c) 2012, Motorola Mobility LLC.
All Rights Reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright notice,
  this list of conditions and the following disclaimer in the documentation
  and/or other materials provided with the distribution.

* Neither the name of Motorola Mobility LLC nor the names of its
  contributors may be used to endorse or promote products derived from this
  software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
</copyright>*/
var Montage = require("montage").Montage,
    CarModel = require("vehicle-config/core/car-model").CarModel;
    Color = require("vehicle-config/core/color").Color,
    Wheelset = require("vehicle-config/core/wheelset").Wheelset,
    Interior = require("vehicle-config/core/interior").Interior,
    BooleanConfigurationOption = require("vehicle-config/core/configuration-option").BooleanConfigurationOption,
    TridionBodyColorConverter = require("tridion-body-color-converter").TridionBodyColorConverter;

var MontageCar = exports.MontageCar = Montage.create(CarModel, {

    moduleName: {
        value: "m-car"
    },

    modelPath: {
        value: "node_modules/m-car/model/mcar.json"
    },

    manufacturer: {
        value: "Montage"
    },

    model: {
        value: "Pint"
    },

    year: {
        value: "2012"
    },

    description: {
        value: "The pure coupe is everything you need and nothing you don’t – it’s mcar in its purest form. You get the best of both worlds: 5-speed smartshift® transmission with automatic mode (for ease) and manual mode (for fun), hill start assist, and it’s packed with lots of standard safety features such as 8 full-size airbags. It’s driving fun with the perfect canvas to personalize. And, if all that's not enough, mcar has the best MPG of any gas vehicle based on Consumer Reports* testing."
    },

    options: {
        distinct: true,
        value: {
            "bodyColor": [
                Color.create().initWithNameAndCostAndRGB("Deep Black", 0, 45,54,58),
                Color.create().initWithNameAndCostAndRGB("Crystal White", 0, 255,255,255),
                Color.create().initWithNameAndCostAndRGB("Rally Red", 0, 231,33,33),
                Color.create().initWithNameAndCostAndRGB("Gray Metallic", 250, 126,116,102),
                Color.create().initWithNameAndCostAndRGB("Light Blue Metallic", 250, 134,156,185)
            ],
            "tridionColor": [
                Color.create().initWithNameAndCostAndRGB("Silver", 0, 174,177,178),
                Color.create().initWithNameAndCostAndRGB("Black", 0, 0,0,0)
            ],
            "wheelset": [
                Wheelset.create().initWithNameAndCost('Silver'),
                Wheelset.create().initWithNameAndCost('Black')
            ],
            "interior": [
                Color.create().initWithNameAndCostAndRGB('Design Black', 0, 16,15,25),
                Color.create().initWithNameAndCostAndRGB('Design Red', 0, 124,30,5),
                Color.create().initWithNameAndCostAndRGB('Design Beige', 0, 174,161,124),
                Color.create().initWithNameAndCostAndRGB('Black Leather Seating', 0, 84,90,108),
                Color.create().initWithNameAndCostAndRGB('Crystal Grey Leather', 1300, 161,161,161)
            ],

            "interiorOptions": [
                BooleanConfigurationOption.create().initWithNameAndCost('Dashboard Gauges', 120),
                BooleanConfigurationOption.create().initWithNameAndCost('Heated Seats', 240),
                BooleanConfigurationOption.create().initWithNameAndCost('Luggage Compartment Cover', 99),
                BooleanConfigurationOption.create().initWithNameAndCost('Ambient light for interior', 190),
                BooleanConfigurationOption.create().initWithNameAndCost('Center console storage', 30)
            ]
        }
    },

    _bodyColor: {
        value: null
    },

    bodyColor: {
        get: function() {
            return this._bodyColor;
        },
        set: function(value) {
            if (value === this._bodyColor) {
                return;
            }

            this._bodyColor = value;

            this.performConfigurationChange("bodyColor");
        }
    },

    customBodyColor: {
        value: null
    },

    _tridionColor: {
        value: null
    },

    tridionColor: {
        get: function() {
            return this._tridionColor;
        },
        set: function(value) {
            if (value === this._tridionColor) {
                return;
            }

            this._tridionColor = value;

            this.performConfigurationChange("tridionColor");
        }
    },

    bodyColorTridionColor: {
        value: null
    },

    _wheelset: {
        value: null
    },

    wheelset: {
        get: function() {
            return this._wheelset;
        },
        set: function(value) {
            if (value === this._wheelset) {
                return;
            }

            this._wheelset = value;

            this.performConfigurationChange("wheelset");
        }
    },

    _interior: {
        value: null
    },

    interior: {
        get: function() {
            return this._interior;
        },
        set: function(value) {
            if (value === this._interior) {
                return;
            }

            this._interior = value;

            this.performConfigurationChange("interior");
        }
    },

    _licensePlateValue: {
        value: "fortwo"
    },

    licensePlateValue: {
        get: function() {
            return this._licensePlateValue;
        },
        set: function(value) {
            if (value === this._licensePlateValue) {
                return;
            }

            this._licensePlateValue = value;

            this.performConfigurationChange("licensePlateValue");
        }
    },

    interiorOptions: {
        dependencies: ["options.interiorOptions.chosen"],
        get: function() {

            return this.options.interiorOptions.filter(function(member) {
                return member.chosen;
            });
        }
    },

    basePrice: {
        value: 14890
    },

    didCreate: {
        value: function() {
            this.wheelset = this.options.wheelset[0];
            this.interior = this.options.interior[0];

            // Add custom body color
            this.customBodyColor = Color.create().initWithNameAndCostAndRGB("Custom", 1500, 254, 203, 66);
            this.options.bodyColor.push(this.customBodyColor);
            this.bodyColor = this.customBodyColor;

            //TODO this seems excessive
            this.customBodyColor.addPropertyChangeListener("red", this);
            this.customBodyColor.addPropertyChangeListener("green", this);
            this.customBodyColor.addPropertyChangeListener("blue", this);

            // Add coordinated sideblade/body color
            var bodyColorTridionColor = this.bodyColorTridionColor = Color.create().initWithNameAndCostAndRGB("Body Color", 1500);
            var tridionBodyColorConverter = TridionBodyColorConverter.create();
            Object.defineBinding(bodyColorTridionColor, "red", {
                boundObject: this,
                boundObjectPropertyPath: "bodyColor.red",
                oneway: true,
                converter: tridionBodyColorConverter
            });

            Object.defineBinding(bodyColorTridionColor, "green", {
                boundObject: this,
                boundObjectPropertyPath: "bodyColor.green",
                oneway: true,
                converter: tridionBodyColorConverter
            });

            Object.defineBinding(bodyColorTridionColor, "blue", {
                boundObject: this,
                boundObjectPropertyPath: "bodyColor.blue",
                oneway: true,
                converter: tridionBodyColorConverter
            });

            this.options.tridionColor.push(bodyColorTridionColor);
            this.tridionColor = bodyColorTridionColor;

            bodyColorTridionColor.addPropertyChangeListener("red", this);
            bodyColorTridionColor.addPropertyChangeListener("green", this);
            bodyColorTridionColor.addPropertyChangeListener("blue", this);

            this.addPropertyChangeListener("options.interiorOptions.chosen", this);

            this.fromHash();

            CarModel.didCreate.call(this);
        }
    },

    initializeModelRepresentation: {
        value: function() {
            this.configureModel("bodyColor");
            this.configureModel("tridionColor");
            this.configureModel("interior");
            this.configureModel("wheelset");
            this.configureModel("licensePlateValue");

            var materialName,
                material;

            var mats = ["material_5", "black"];
            for (var i = 0; i < mats.length; i++) {
                materialName = mats[i];
                material = this.modelRepresentation.materialForName(materialName);
                if (material) {
                    material.inputs.shininess = 50;
                }

            }
            var mirror = [/*light cluster*/"material_15", /*mirror*/"material_4"];
            for (var i = 0; i < mirror.length; i++) {
                materialName = mirror[i];
                material = this.modelRepresentation.materialForName(materialName);
                if (material) {
                    material.inputs.shininess = 1000;
                }

            }
        }
    },

    _highlightTimeouts: {
        distinct: true,
        value: {}
    },

    highlightDuration: {
        value: 400
    },

    highlightModel: {
        value: function(property, materialName) {

            this.modelRepresentation.implicitAnimationsEnabled = false;

            clearTimeout(this._highlightTimeouts[property]);

            var material = this.modelRepresentation.materialForName(materialName);
            material.inputs.diffuseColor = [0.8, 0.8, 0.8];
            this.modelRepresentation.update();

            var self = this;
            this._highlightTimeouts = setTimeout(function() {
                self.unhighlightModel(property, materialName);
            }, this.highlightDuration);
        }
    },

    unhighlightModel: {
        value: function(property, materialName) {
            this.configureModel(property, false);
        }
    },

    configureModel: {
        value: function(changedProperty, implicitAnimationsEnabled) {

            if (!this.modelRepresentation || !this.modelRepresentation.hasMaterials) {
                return;
            }

            clearTimeout(this._highlightTimeouts[changedProperty]);
            // TODO hack to avoid occasional flickering when highlighting
            this.modelRepresentation.implicitAnimationsEnabled = (implicitAnimationsEnabled || typeof implicitAnimationsEnabled === "undefined");

            var color,
                materialName,
                material;

            if ("bodyColor" === changedProperty) {
                color = this.bodyColor;
                materialName = "material_14";
                material = this.modelRepresentation.materialForName(materialName);
                material.inputs.diffuseColor = [color.red/255 , color.green/255 , color.blue/255];
                this.modelRepresentation.update();
                return true;
            } else if ("tridionColor" === changedProperty) {
                color = this.tridionColor;
                materialName = "material_5";
                material = this.modelRepresentation.materialForName(materialName);
                material.inputs.diffuseColor = [color.red/255 , color.green/255 , color.blue/255];
                this.modelRepresentation.update();
                return true;
            } else if ("interior" === changedProperty) {
                color = this.interior;
                materialName = "interior1";
                material = this.modelRepresentation.materialForName(materialName);
                material.inputs.diffuseColor = [color.red/255 , color.green/255 , color.blue/255];
                this.modelRepresentation.update();
                return true;
            } else if ("wheelset" === changedProperty) {

//                //TODO not base this on index
//                var isSilverWheels = this.options.wheelset[0] === this.wheelset;
//
//                var silverWheels = "material_19";
//                material = this.modelRepresentation.materialForName(silverWheels);
//                material.inputs.transparency = isSilverWheels ? 1 : 0;
//
//                var blackWheels = "material_28";
//                material = this.modelRepresentation.materialForName(blackWheels);
//                material.inputs.transparency = isSilverWheels ? 0 : 1;
//
//                this.modelRepresentation.update();
                return true;
            } else if ("licensePlateValue" === changedProperty) {
//                materialName = "material_9";
//                material = this.modelRepresentation.materialForName(materialName);
//                //TODO apply texture from canvas to licensePlate
//                this.modelRepresentation.update();
                return true;
            }
        }
    },

    handleChange: {
        value: function(notification) {
            var path = notification.currentPropertyPath;
            if (/tridionColor|bodyColor|red|green|blue/.test(path)) {
                this.configureModel("bodyColor");
                this.configureModel("tridionColor");
            } else if (/interiorOptions/.test(path)) {
                this.configureModel("interiorOptions");
            }
        }
    },

    toHash: {
        value: function() {

            window.mcar = this;

            var string = "#!bodyColor/" + this.options.bodyColor.indexOf(this.bodyColor);
            string += "/customBodyColor/" + this.customBodyColor.hex;
            string += "/tridionColor/" + this.options.tridionColor.indexOf(this.tridionColor);
            string += "/wheelset/" + this.options.wheelset.indexOf(this.wheelset);
            string += "/interior/" + this.options.interior.indexOf(this.interior);
            string += "/plate/" + this.licensePlateValue;

            var interiorOptions = this.options.interiorOptions.map(function(member, index) {
                return member.chosen ? index : null;
            }).filter(function(member) {
                return null != member;
            });

            string += "/interiorOptions/" + interiorOptions.join(",");
            return string;
        }
    },

    fromHash: {
        value: function() {
            var hash = window.location.hash,
                match;

            if (!/#!/.test(hash)) {
                return;
            }

            hash = decodeURIComponent(hash);
            hash = hash.replace(/#!/, "");

            match = hash.match(/bodyColor\/(\d+)/);
            if (null != match && null != match[1]) {
                this.bodyColor = this.options.bodyColor[match[1]];
            }

            match = hash.match(/customBodyColor\/(#[\w\d]{6})/);
            if (null != match && null != match[1]) {
                this.customBodyColor.hex = match[1];
            }

            match = hash.match(/tridionColor\/(\d+)/);
            if (null != match && null != match[1]) {
                this.tridionColor = this.options.tridionColor[match[1]];
            }

            match = hash.match(/wheelset\/(\d+)/);
            if (null != match && null != match[1]) {
                this.wheelset = this.options.wheelset[match[1]];
            }

            match = hash.match(/interior\/(\d+)/);
            if (null != match && null != match[1]) {
                this.interior = this.options.interior[match[1]];
            }

            match = hash.match(/plate\/([\w\s\d]+)/);
            if (null != match && null != match[1]) {
                this.licensePlateValue = match[1];
            }

            match = hash.match(/interiorOptions\/((\d,?)*)/);

            if (null != match && null != match[1]) {
                var chosenInteriorOptionIndexes = match[1].split(",").map(function(index) {
                    return parseInt(index, 10);
                });

                this.options.interiorOptions.forEach(function(member, index) {
                    member.chosen = (chosenInteriorOptionIndexes.indexOf(index) >= 0);
                });
            }

        }
    }

});

